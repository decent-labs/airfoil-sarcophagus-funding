{
  "address": "0xb67c5Be3A6Ab7Ed05FB7C46b0a160a279B72BB13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_usdcToSarcoRates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_vestingEndDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offerExpirationDelay",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_sarcoFunders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sarcoAllocations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sarcoRateIndex",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_sarcoAllocationsTotal",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sarcoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_generalTokenVesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sarcoDao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sarcoReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sarcoAllocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcCost",
          "type": "uint256"
        }
      ],
      "name": "FundingExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiresAt",
          "type": "uint256"
        }
      ],
      "name": "OfferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensRecovered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sarcoReceiver",
          "type": "address"
        }
      ],
      "name": "executePurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sarcoAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcToSarcoRateIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generalTokenVesting",
      "outputs": [
        {
          "internalType": "contract GeneralTokenVesting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sarcoReceiver",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerExpirationDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offerStartedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipientAddress",
          "type": "address"
        }
      ],
      "name": "recoverErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverUnsoldTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sarcoAllocationsTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sarcoDao",
      "outputs": [
        {
          "internalType": "contract Finance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sarcoToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usdcToSarcoRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingEndDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
  "receipt": {
    "to": null,
    "from": "0xAE9B102741a1B60C221e39CD9526Ab38c9865AB3",
    "contractAddress": "0xb67c5Be3A6Ab7Ed05FB7C46b0a160a279B72BB13",
    "transactionIndex": 90,
    "gasUsed": "2941505",
    "logsBloom": "0x
    "blockHash": "0xdbd40c780d2dcb849a2698bcb3d6d346387b5edee6f170eab80c5b06a64aaa41",
    "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 14140673,
        "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
        "address": "0xb67c5Be3A6Ab7Ed05FB7C46b0a160a279B72BB13",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ae9b102741a1b60c221e39cd9526ab38c9865ab3"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0xdbd40c780d2dcb849a2698bcb3d6d346387b5edee6f170eab80c5b06a64aaa41"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 14140673,
        "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b67c5be3a6ab7ed05fb7c46b0a160a279b72bb13",
          "0x0000000000000000000000003299f6a52983ba00ffaa0d8c2d5075ca3f3b7991"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 201,
        "blockHash": "0xdbd40c780d2dcb849a2698bcb3d6d346387b5edee6f170eab80c5b06a64aaa41"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 14140673,
        "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
        "address": "0x7697B462A7c4Ff5F8b55BDBC2F4076c2aF9cF51A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b67c5be3a6ab7ed05fb7c46b0a160a279b72bb13",
          "0x0000000000000000000000008727c592f28f10b42eb0914a7f6a5885823794c0"
        ],
        "data": "0x0000000000000000000000000000000000000000000115eec47f6cf7e3500000",
        "logIndex": 202,
        "blockHash": "0xdbd40c780d2dcb849a2698bcb3d6d346387b5edee6f170eab80c5b06a64aaa41"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 14140673,
        "transactionHash": "0x0516d625bfe4026b98d33ae2e8fd6717cb6be9f5c2ce67cbc180e56edc6f5986",
        "address": "0x7697B462A7c4Ff5F8b55BDBC2F4076c2aF9cF51A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b67c5be3a6ab7ed05fb7c46b0a160a279b72bb13",
          "0x0000000000000000000000003299f6a52983ba00ffaa0d8c2d5075ca3f3b7991"
        ],
        "data": "0x0000000000000000000000000000000000000000000115eec47f6cf7e3500000",
        "logIndex": 203,
        "blockHash": "0xdbd40c780d2dcb849a2698bcb3d6d346387b5edee6f170eab80c5b06a64aaa41"
      }
    ],
    "blockNumber": 14140673,
    "cumulativeGasUsed": "11581480",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "5000000000000000000",
      "2500000000000000000"
    ],
    63072000,
    2592000,
    [
      "0xB1Cd805ED5B419bA4054375Ec9E99fCf1C73da02",
      "0xF8b0a843880e67f34DB6610380a6C3631bfB3Df8",
      "0x02833B4d3FF06e993c16522A177836426F01DD9E",
      "0xac1B1CC2FEE62d8dc215821A7aFC1d8594FF2f92",
      "0x6e9bEcc317bF34E9394a2000f9a9a61dFAd596FE"
    ],
    [
      "250000000000000000000000",
      "750000000000000000000000",
      "125000000000000000000000",
      "125000000000000000000000",
      "62500000000000000000000"
    ],
    [
      0,
      0,
      1,
      1,
      1
    ],
    "1312500000000000000000000",
    "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
    "0x7697b462a7c4ff5f8b55bdbc2f4076c2af9cf51a",
    "0x8727c592f28f10b42eb0914a7f6a5885823794c0",
    "0x3299f6a52983ba00ffaa0d8c2d5075ca3f3b7991"
  ],
  "solcInputHash": "d9a8ba5100ce6162513652c1c8550168",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_usdcToSarcoRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEndDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offerExpirationDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_sarcoFunders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sarcoAllocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sarcoRateIndex\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_sarcoAllocationsTotal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sarcoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_generalTokenVesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sarcoDao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sarcoReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sarcoAllocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcCost\",\"type\":\"uint256\"}],\"name\":\"FundingExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"OfferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sarcoReceiver\",\"type\":\"address\"}],\"name\":\"executePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sarcoAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcToSarcoRateIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalTokenVesting\",\"outputs\":[{\"internalType\":\"contract GeneralTokenVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sarcoReceiver\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerExpirationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerStartedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"}],\"name\":\"recoverErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sarcoAllocationsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sarcoDao\",\"outputs\":[{\"internalType\":\"contract Finance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sarcoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdcToSarcoRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEndDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"allow a whitelisted set of addresses to Fund SARCO, via stablecoins (USDC),exchange rate set w/ each traunche/group\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"inits/sets sarco funding enviorment\",\"params\":{\"_generalTokenVesting\":\"GeneralTokenVesting contract address\",\"_offerExpirationDelay\":\"Delay from the contract deployment to offer expiration, in seconds\",\"_sarcoAllocations\":\"List of SARCO token allocations, should include decimals 10 ** 18\",\"_sarcoAllocationsTotal\":\"Checksum of SARCO token allocations, should include decimals 10 ** 18\",\"_sarcoDao\":\"Sarco DAO contract address\",\"_sarcoFunders\":\"List of valid SARCO investor\",\"_sarcoRateIndex\":\"group which Sarco investor belongs to\",\"_sarcoToken\":\"Sarco token address\",\"_usdcToSarcoRates\":\"Array of usdc/sarco rates\",\"_usdcToken\":\"USDC token address\",\"_vestingEndDelay\":\"Delay from the purchase moment to the vesting end moment, in seconds\"}},\"executePurchase(address)\":{\"details\":\"Purchases Sarco for the specified address in exchange for USDC.\",\"params\":{\"sarcoReceiver\":\"Whitelisted Sarco Investor\"}},\"getAllocation(address)\":{\"details\":\"Returns the Sarco allocation and the USDC cost to invest the Sarco Allocation of the whitelisted Sarco investor\",\"params\":{\"sarcoReceiver\":\"Whitelisted Sarco Investor\"},\"returns\":{\"_0\":\"A tuple: the first element is the amount of SARCO available for purchase (zero if the purchase was already executed for that address), the second element is the USDC cost of the purchase.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverErc20(address,uint256,address)\":{\"details\":\"Remember that only owner can call so be careful when use on contracts generated from other contracts.\",\"params\":{\"recipientAddress\":\"The address to send tokens to\",\"tokenAddress\":\"The token contract address\",\"tokenAmount\":\"Number of tokens to be sent\"}},\"recoverUnsoldTokens()\":{\"details\":\"If recoverUnsoldTokens > 0 after the offer expired, sarco tokens are send back to Sarco Dao via Finance Contract.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"FundingExecutor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executePurchase(address)\":{\"notice\":\"Sends USDC tokens used to purchase Sarco to Sarco DAO,  Approves GeneralTokenVesting contract Sarco Tokens to utilizes allocated Sarco funds, Starts token vesting via GeneralTokenVesting contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundingExecutor.sol\":\"FundingExecutor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"contracts/FundingExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./interfaces/GeneralTokenVesting.sol\\\";\\nimport \\\"./interfaces/Finance.sol\\\";\\n\\n/**\\n * @title FundingExecutor\\n * @dev allow a whitelisted set of addresses to Fund SARCO, via stablecoins (USDC),\\n * @dev exchange rate set w/ each traunche/group\\n */\\ncontract FundingExecutor is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant USDC_TO_SARCO_PRECISION = 10**18;\\n    uint256 private constant SARCO_TO_USDC_DECIMAL_FIX = 10**(18 - 6);\\n    uint256 public immutable sarcoAllocationsTotal;\\n    uint256 public immutable offerExpirationDelay;\\n    uint256 public immutable vestingEndDelay;\\n    IERC20 public immutable usdcToken;\\n    IERC20 public immutable sarcoToken;\\n    GeneralTokenVesting public immutable generalTokenVesting;\\n    Finance public immutable sarcoDao;\\n\\n    uint256 public offerStartedAt;\\n    uint256 public offerExpiresAt;\\n\\n    uint256[] public usdcToSarcoRates;\\n    struct FunderInfo {\\n        uint256 sarcoAllocation;\\n        uint256 usdcToSarcoRateIndex;\\n    }\\n\\n    mapping(address => FunderInfo) public funders;\\n\\n    // The purchase has been executed exchanging USDC to vested SARCO\\n    event FundingExecuted(\\n        // the address that has received the vested SARCO tokens\\n        address indexed sarcoReceiver,\\n        // the number of SARCO tokens vested to sarcoReceiver\\n        uint256 sarcoAllocation,\\n        // the amount of USDC that was invested and forwarded to the DAO\\n        uint256 usdcCost\\n    );\\n\\n    // Creates a window of time which the whitelisted set of addresses may invest in SARCO\\n    event OfferStarted(\\n        // Window start time\\n        uint256 startedAt,\\n        // Window end time\\n        uint256 expiresAt\\n    );\\n\\n    // If tokens have not been invested after time window, the DAO can recover tokens\\n    event TokensRecovered(\\n        // Amount of Tokens\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev inits/sets sarco funding enviorment\\n     * @param _usdcToSarcoRates Array of usdc/sarco rates\\n     * @param _vestingEndDelay Delay from the purchase moment to the vesting end moment, in seconds\\n     * @param _offerExpirationDelay Delay from the contract deployment to offer expiration, in seconds\\n     * @param _sarcoFunders  List of valid SARCO investor\\n     * @param _sarcoAllocations List of SARCO token allocations, should include decimals 10 ** 18\\n     * @param _sarcoRateIndex group which Sarco investor belongs to\\n     * @param _sarcoAllocationsTotal Checksum of SARCO token allocations, should include decimals 10 ** 18\\n     * @param _usdcToken USDC token address\\n     * @param _sarcoToken Sarco token address\\n     * @param _generalTokenVesting GeneralTokenVesting contract address\\n     * @param _sarcoDao Sarco DAO contract address\\n     */\\n    constructor(\\n        uint256[] memory _usdcToSarcoRates,\\n        uint256 _vestingEndDelay,\\n        uint256 _offerExpirationDelay,\\n        address[] memory _sarcoFunders,\\n        uint256[] memory _sarcoAllocations,\\n        uint256[] memory _sarcoRateIndex,\\n        uint256 _sarcoAllocationsTotal,\\n        address _usdcToken,\\n        address _sarcoToken,\\n        address _generalTokenVesting,\\n        address _sarcoDao\\n    ) {\\n        require(\\n            _usdcToSarcoRates.length > 0,\\n            \\\"FundingExecutor: array must be greater than 0\\\"\\n        );\\n        require(\\n            _vestingEndDelay > 0,\\n            \\\"FundingExecutor: endDelay must be greater than 0\\\"\\n        );\\n        require(\\n            _offerExpirationDelay > 0,\\n            \\\"FundingExecutor: offerExpiration must be greater than 0\\\"\\n        );\\n        require(\\n            _sarcoFunders.length == _sarcoAllocations.length &&\\n                _sarcoAllocations.length == _sarcoRateIndex.length,\\n            \\\"FundingExecutor: purchasers, allocations, indexes lengths must be equal\\\"\\n        );\\n        require(\\n            _usdcToken != address(0),\\n            \\\"FundingExecutor: _usdcToken cannot be 0 address\\\"\\n        );\\n        require(\\n            _sarcoToken != address(0),\\n            \\\"FundingExecutor: _sarcoToken cannot be 0 address\\\"\\n        );\\n        require(\\n            _generalTokenVesting != address(0),\\n            \\\"FundingExecutor: _generalTokenVesting cannot be 0 address\\\"\\n        );\\n        require(\\n            _sarcoDao != address(0),\\n            \\\"FundingExecutor: _sarcoDao cannot be 0 address\\\"\\n        );\\n\\n        // Set global variables\\n        usdcToSarcoRates = _usdcToSarcoRates;\\n        vestingEndDelay = _vestingEndDelay;\\n        offerExpirationDelay = _offerExpirationDelay;\\n        sarcoAllocationsTotal = _sarcoAllocationsTotal;\\n        usdcToken = IERC20(_usdcToken);\\n        sarcoToken = IERC20(_sarcoToken);\\n        generalTokenVesting = GeneralTokenVesting(_generalTokenVesting);\\n        sarcoDao = Finance(_sarcoDao);\\n        uint256 allocationsSum = 0;\\n        for (uint256 i = 0; i < _sarcoFunders.length; i++) {\\n            require(\\n                _sarcoFunders[i] != address(0),\\n                \\\"FundingExecutor: Funder cannot be the ZERO address\\\"\\n            );\\n            require(\\n                funders[_sarcoFunders[i]].sarcoAllocation == 0,\\n                \\\"FundingExecutor: Allocation has already been set\\\"\\n            );\\n            require(\\n                _sarcoAllocations[i] > 0,\\n                \\\"FundingExecutor: No allocated Sarco tokens for address\\\"\\n            );\\n            require(\\n                _usdcToSarcoRates[_sarcoRateIndex[i]] > 0,\\n                \\\"FundingExecutor: _usdcToSarcoRates must be greater than 0\\\"\\n            );\\n            funders[_sarcoFunders[i]] = FunderInfo(\\n                _sarcoAllocations[i],\\n                _sarcoRateIndex[i]\\n            );\\n            allocationsSum += _sarcoAllocations[i];\\n        }\\n        require(\\n            allocationsSum == _sarcoAllocationsTotal,\\n            \\\"FundingExecutor: AllocationsTotal does not equal the sum of passed allocations\\\"\\n        );\\n\\n        // Approve SarcoDao - PurchaseExecutor's total USDC tokens (Execute Purchase)\\n        IERC20(_usdcToken).approve(_sarcoDao, type(uint256).max);\\n\\n        // Approve full SARCO amount to GeneralTokenVesting contract\\n        IERC20(_sarcoToken).approve(\\n            _generalTokenVesting,\\n            _sarcoAllocationsTotal\\n        );\\n\\n        // Approve SarcoDao - Funding Executor's total SARCO tokens (Recover Tokens)\\n        IERC20(_sarcoToken).approve(_sarcoDao, _sarcoAllocationsTotal);\\n    }\\n\\n    function _getUsdcCost(uint256 sarcoAmount, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            ((sarcoAmount * USDC_TO_SARCO_PRECISION) /\\n                usdcToSarcoRates[index]) / SARCO_TO_USDC_DECIMAL_FIX;\\n    }\\n\\n    function offerStarted() public view returns (bool) {\\n        return offerStartedAt != 0;\\n    }\\n\\n    function offerExpired() public view returns (bool) {\\n        return block.timestamp >= offerExpiresAt;\\n    }\\n\\n    /**\\n     * @notice Starts the offer if it 1) hasn't been started yet and 2) has received funding in full.\\n     */\\n    function _startUnlessStarted() internal {\\n        require(\\n            offerStartedAt == 0,\\n            \\\"FundingExecutor: Offer has already started\\\"\\n        );\\n        require(\\n            sarcoToken.balanceOf(address(this)) == sarcoAllocationsTotal,\\n            \\\"FundingExecutor: Insufficient Sarco contract balance to start offer\\\"\\n        );\\n\\n        offerStartedAt = block.timestamp;\\n        offerExpiresAt = block.timestamp + offerExpirationDelay;\\n        emit OfferStarted(offerStartedAt, offerExpiresAt);\\n    }\\n\\n    function start() public {\\n        _startUnlessStarted();\\n    }\\n\\n    /**\\n     * @dev Returns the Sarco allocation and the USDC cost to invest the Sarco Allocation of the whitelisted Sarco investor\\n     * @param sarcoReceiver Whitelisted Sarco Investor\\n     * @return A tuple: the first element is the amount of SARCO available for purchase (zero if\\n        the purchase was already executed for that address), the second element is the\\n        USDC cost of the purchase.\\n     */\\n    function getAllocation(address sarcoReceiver)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        FunderInfo memory _funder = funders[sarcoReceiver];\\n        uint256 usdcCost = _getUsdcCost(\\n            _funder.sarcoAllocation,\\n            _funder.usdcToSarcoRateIndex\\n        );\\n        return (_funder.sarcoAllocation, usdcCost);\\n    }\\n\\n    /**\\n     * @dev Purchases Sarco for the specified address in exchange for USDC.\\n     * @notice Sends USDC tokens used to purchase Sarco to Sarco DAO, \\n     Approves GeneralTokenVesting contract Sarco Tokens to utilizes allocated Sarco funds,\\n     Starts token vesting via GeneralTokenVesting contract.\\n     * @param sarcoReceiver Whitelisted Sarco Investor\\n     */\\n    function executePurchase(address sarcoReceiver) external {\\n        if (offerStartedAt == 0) {\\n            start();\\n        }\\n        require(\\n            block.timestamp < offerExpiresAt,\\n            \\\"FundingExecutor: Purchases cannot be made after the offer has expired\\\"\\n        );\\n\\n        (uint256 sarcoAllocation, uint256 usdcCost) = getAllocation(msg.sender);\\n\\n        // Check sender's allocation\\n        require(\\n            sarcoAllocation > 0,\\n            \\\"FundingExecutor: sender does not have a SARCO allocation\\\"\\n        );\\n\\n        // Clear sender's allocation\\n        funders[msg.sender].sarcoAllocation = 0;\\n\\n        // transfer sender's USDC to this contract\\n        usdcToken.safeTransferFrom(msg.sender, address(this), usdcCost);\\n\\n        // Dynamically Build finance app's \\\"message\\\" string\\n        string memory _executedPurchaseString = string(\\n            abi.encodePacked(\\n                \\\"Funding Executed by account: \\\",\\n                Strings.toHexString(uint160(msg.sender), 20),\\n                \\\" for account: \\\",\\n                Strings.toHexString(uint160(sarcoReceiver), 20),\\n                \\\". Total SARCOs: \\\",\\n                Strings.toString(sarcoAllocation),\\n                \\\".\\\"\\n            )\\n        );\\n\\n        // Forward USDC cost of the purchase to the DAO contract via the Finance Deposit method\\n        sarcoDao.deposit(address(usdcToken), usdcCost, _executedPurchaseString);\\n\\n        // Call GeneralTokenVesting startVest method\\n        GeneralTokenVesting(generalTokenVesting).startVest(\\n            sarcoReceiver,\\n            sarcoAllocation,\\n            vestingEndDelay,\\n            address(sarcoToken)\\n        );\\n\\n        emit FundingExecuted(sarcoReceiver, sarcoAllocation, usdcCost);\\n    }\\n\\n    /**\\n     * @dev If recoverUnsoldTokens > 0 after the offer expired, sarco tokens are send back to Sarco Dao via Finance Contract.\\n     */\\n    function recoverUnsoldTokens() external {\\n        require(\\n            offerStarted(),\\n            \\\"FundingExecutor: Purchase offer has not yet started\\\"\\n        );\\n        require(\\n            offerExpired(),\\n            \\\"FundingExecutor: Purchase offer has not yet expired\\\"\\n        );\\n\\n        uint256 unsoldSarcoAmount = sarcoToken.balanceOf(address(this));\\n\\n        require(\\n            unsoldSarcoAmount > 0,\\n            \\\"FundingExecutor: There are no Sarco tokens to recover\\\"\\n        );\\n\\n        // Dynamically Build finance app's \\\"message\\\" string\\n        string memory _recoverTokensString = \\\"Recovered unsold SARCO tokens\\\";\\n\\n        // Forward recoverable SARCO tokens to the DAO contract via the Finance Deposit method\\n        sarcoDao.deposit(\\n            address(sarcoToken),\\n            unsoldSarcoAmount,\\n            _recoverTokensString\\n        );\\n\\n        // zero out token approvals that this contract has given in its constructor\\n        usdcToken.approve(address(sarcoDao), 0);\\n        sarcoToken.approve(address(generalTokenVesting), 0);\\n        sarcoToken.approve(address(sarcoDao), 0);\\n\\n        emit TokensRecovered(unsoldSarcoAmount);\\n    }\\n\\n    /**\\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\\n     * @param tokenAddress The token contract address\\n     * @param tokenAmount Number of tokens to be sent\\n     * @param recipientAddress The address to send tokens to\\n     */\\n    function recoverErc20(\\n        address tokenAddress,\\n        uint256 tokenAmount,\\n        address recipientAddress\\n    ) public onlyOwner {\\n        IERC20(tokenAddress).safeTransfer(recipientAddress, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xb11c04da930208e2abcd878a6d71a53405da65c2cf3a1e108feba428d8bfd115\",\"license\":\"MIT\"},\"contracts/interfaces/Finance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface Finance {\\n    function deposit(\\n        address _token,\\n        uint256 _value,\\n        string memory _reference\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd6b49bd8f46559d6944d9266c0c0511537d542548226ee19427a67189d9ca1a0\",\"license\":\"MIT\"},\"contracts/interfaces/GeneralTokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface GeneralTokenVesting {\\n    function startVest(\\n        address beneficiary,\\n        uint256 tokensToVest,\\n        uint256 vestDuration,\\n        address tokenAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0x02b824d44001481e0324405f7097ba82b89f43f09f61ae0aeea82f630e54682c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620045e1380380620045e1833981810160405281019062000038919062000dbb565b620000586200004c6200097f60201b60201c565b6200098760201b60201c565b60008b51116200009f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000969062000fcb565b60405180910390fd5b60008a11620000e5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000dc9062001063565b60405180910390fd5b600089116200012b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012290620010fb565b60405180910390fd5b865188511480156200013e575085518751145b62000180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017790620011b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620001f3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ea9062001251565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000266576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025d90620012e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620002d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002d09062001381565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200034c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003439062001419565b60405180910390fd5b8a600390805190602001906200036492919062000a4b565b508960c081815250508860a0818152505084608081815250508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250506000805b89518110156200077b57600073ffffffffffffffffffffffffffffffffffffffff168a82815181106200048c576200048b6200143b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415620004ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004e590620014e0565b60405180910390fd5b6000600460008c84815181106200050a57620005096200143b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541462000593576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200058a9062001578565b60405180910390fd5b6000898281518110620005ab57620005aa6200143b565b5b602002602001015111620005f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005ed9062001610565b60405180910390fd5b60008d8983815181106200060f576200060e6200143b565b5b6020026020010151815181106200062b576200062a6200143b565b5b60200260200101511162000676576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200066d90620016a8565b60405180910390fd5b60405180604001604052808a83815181106200069757620006966200143b565b5b60200260200101518152602001898381518110620006ba57620006b96200143b565b5b6020026020010151815250600460008c8481518110620006df57620006de6200143b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050508881815181106200074e576200074d6200143b565b5b602002602001015182620007639190620016f9565b91508080620007729062001756565b91505062000454565b50858114620007c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007b89062001840565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200081e92919062001884565b6020604051808303816000875af11580156200083e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008649190620018ee565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b384886040518363ffffffff1660e01b8152600401620008a292919062001884565b6020604051808303816000875af1158015620008c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008e89190620018ee565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b383886040518363ffffffff1660e01b81526004016200092692919062001884565b6020604051808303816000875af115801562000946573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200096c9190620018ee565b5050505050505050505050505062001920565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000a8a579160200282015b8281111562000a8957825182559160200191906001019062000a6c565b5b50905062000a99919062000a9d565b5090565b5b8082111562000ab857600081600090555060010162000a9e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000b208262000ad5565b810181811067ffffffffffffffff8211171562000b425762000b4162000ae6565b5b80604052505050565b600062000b5762000abc565b905062000b65828262000b15565b919050565b600067ffffffffffffffff82111562000b885762000b8762000ae6565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b62000bb38162000b9e565b811462000bbf57600080fd5b50565b60008151905062000bd38162000ba8565b92915050565b600062000bf062000bea8462000b6a565b62000b4b565b9050808382526020820190506020840283018581111562000c165762000c1562000b99565b5b835b8181101562000c43578062000c2e888262000bc2565b84526020840193505060208101905062000c18565b5050509392505050565b600082601f83011262000c655762000c6462000ad0565b5b815162000c7784826020860162000bd9565b91505092915050565b600067ffffffffffffffff82111562000c9e5762000c9d62000ae6565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000cdc8262000caf565b9050919050565b62000cee8162000ccf565b811462000cfa57600080fd5b50565b60008151905062000d0e8162000ce3565b92915050565b600062000d2b62000d258462000c80565b62000b4b565b9050808382526020820190506020840283018581111562000d515762000d5062000b99565b5b835b8181101562000d7e578062000d69888262000cfd565b84526020840193505060208101905062000d53565b5050509392505050565b600082601f83011262000da05762000d9f62000ad0565b5b815162000db284826020860162000d14565b91505092915050565b60008060008060008060008060008060006101608c8e03121562000de45762000de362000ac6565b5b60008c015167ffffffffffffffff81111562000e055762000e0462000acb565b5b62000e138e828f0162000c4d565b9b5050602062000e268e828f0162000bc2565b9a5050604062000e398e828f0162000bc2565b99505060608c015167ffffffffffffffff81111562000e5d5762000e5c62000acb565b5b62000e6b8e828f0162000d88565b98505060808c015167ffffffffffffffff81111562000e8f5762000e8e62000acb565b5b62000e9d8e828f0162000c4d565b97505060a08c015167ffffffffffffffff81111562000ec15762000ec062000acb565b5b62000ecf8e828f0162000c4d565b96505060c062000ee28e828f0162000bc2565b95505060e062000ef58e828f0162000cfd565b94505061010062000f098e828f0162000cfd565b93505061012062000f1d8e828f0162000cfd565b92505061014062000f318e828f0162000cfd565b9150509295989b509295989b9093969950565b600082825260208201905092915050565b7f46756e64696e674578656375746f723a206172726179206d757374206265206760008201527f726561746572207468616e203000000000000000000000000000000000000000602082015250565b600062000fb3602d8362000f44565b915062000fc08262000f55565b604082019050919050565b6000602082019050818103600083015262000fe68162000fa4565b9050919050565b7f46756e64696e674578656375746f723a20656e6444656c6179206d757374206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b60006200104b60308362000f44565b9150620010588262000fed565b604082019050919050565b600060208201905081810360008301526200107e816200103c565b9050919050565b7f46756e64696e674578656375746f723a206f6666657245787069726174696f6e60008201527f206d7573742062652067726561746572207468616e2030000000000000000000602082015250565b6000620010e360378362000f44565b9150620010f08262001085565b604082019050919050565b600060208201905081810360008301526200111681620010d4565b9050919050565b7f46756e64696e674578656375746f723a20707572636861736572732c20616c6c60008201527f6f636174696f6e732c20696e6465786573206c656e67746873206d757374206260208201527f6520657175616c00000000000000000000000000000000000000000000000000604082015250565b6000620011a160478362000f44565b9150620011ae826200111d565b606082019050919050565b60006020820190508181036000830152620011d48162001192565b9050919050565b7f46756e64696e674578656375746f723a205f75736463546f6b656e2063616e6e60008201527f6f74206265203020616464726573730000000000000000000000000000000000602082015250565b600062001239602f8362000f44565b91506200124682620011db565b604082019050919050565b600060208201905081810360008301526200126c816200122a565b9050919050565b7f46756e64696e674578656375746f723a205f736172636f546f6b656e2063616e60008201527f6e6f742062652030206164647265737300000000000000000000000000000000602082015250565b6000620012d160308362000f44565b9150620012de8262001273565b604082019050919050565b600060208201905081810360008301526200130481620012c2565b9050919050565b7f46756e64696e674578656375746f723a205f67656e6572616c546f6b656e566560008201527f7374696e672063616e6e6f742062652030206164647265737300000000000000602082015250565b60006200136960398362000f44565b915062001376826200130b565b604082019050919050565b600060208201905081810360008301526200139c816200135a565b9050919050565b7f46756e64696e674578656375746f723a205f736172636f44616f2063616e6e6f60008201527f7420626520302061646472657373000000000000000000000000000000000000602082015250565b600062001401602e8362000f44565b91506200140e82620013a3565b604082019050919050565b600060208201905081810360008301526200143481620013f2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f46756e64696e674578656375746f723a2046756e6465722063616e6e6f74206260008201527f6520746865205a45524f20616464726573730000000000000000000000000000602082015250565b6000620014c860328362000f44565b9150620014d5826200146a565b604082019050919050565b60006020820190508181036000830152620014fb81620014b9565b9050919050565b7f46756e64696e674578656375746f723a20416c6c6f636174696f6e206861732060008201527f616c7265616479206265656e2073657400000000000000000000000000000000602082015250565b60006200156060308362000f44565b91506200156d8262001502565b604082019050919050565b60006020820190508181036000830152620015938162001551565b9050919050565b7f46756e64696e674578656375746f723a204e6f20616c6c6f636174656420536160008201527f72636f20746f6b656e7320666f72206164647265737300000000000000000000602082015250565b6000620015f860368362000f44565b915062001605826200159a565b604082019050919050565b600060208201905081810360008301526200162b81620015e9565b9050919050565b7f46756e64696e674578656375746f723a205f75736463546f536172636f52617460008201527f6573206d7573742062652067726561746572207468616e203000000000000000602082015250565b60006200169060398362000f44565b91506200169d8262001632565b604082019050919050565b60006020820190508181036000830152620016c38162001681565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620017068262000b9e565b9150620017138362000b9e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200174b576200174a620016ca565b5b828201905092915050565b6000620017638262000b9e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620017995762001798620016ca565b5b600182019050919050565b7f46756e64696e674578656375746f723a20416c6c6f636174696f6e73546f746160008201527f6c20646f6573206e6f7420657175616c207468652073756d206f66207061737360208201527f656420616c6c6f636174696f6e73000000000000000000000000000000000000604082015250565b600062001828604e8362000f44565b91506200183582620017a4565b606082019050919050565b600060208201905081810360008301526200185b8162001819565b9050919050565b6200186d8162000ccf565b82525050565b6200187e8162000b9e565b82525050565b60006040820190506200189b600083018562001862565b620018aa602083018462001873565b9392505050565b60008115159050919050565b620018c881620018b1565b8114620018d457600080fd5b50565b600081519050620018e881620018bd565b92915050565b60006020828403121562001907576200190662000ac6565b5b60006200191784828501620018d7565b91505092915050565b60805160a05160c05160e051610100516101205161014051612be8620019f96000396000818161067c01528181610c1201528181610cfd01528181610e7d0152610f3c01526000818161072b015281816108520152610dbd01526000818161078a0152818161088301528181610af901528181610c4e01528181610d8101528181610e41015261168d01526000818161047e015281816105c5015281816106b80152610cc10152600081816107690152610a11015260008181610a3b015261176e0152600081816104a2015261166c0152612be86000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b85780639ea5c1eb1161007c5780639ea5c1eb1461031e578063bd0d27041461033c578063be9a65551461035a578063c5543e5e14610364578063cfaac26a1461036e578063f2fde38b1461038c57610137565b8063715018a61461029e5780637c6edf07146102a8578063819bea4b146102c65780638da5cb5b146102e25780639a87b5ea1461030057610137565b80632565f94f116100ff5780632565f94f1461020a5780632dadda041461022857806332afcc89146102445780633717c67e14610262578063607e8f091461028057610137565b8063031b36771461013c5780630a65cb581461016d5780630e0229231461019d57806311eac855146101ce578063196a0648146101ec575b600080fd5b61015660048036038101906101519190611aad565b6103a8565b604051610164929190611af3565b60405180910390f35b61018760048036038101906101829190611b48565b6103cc565b6040516101949190611b75565b60405180910390f35b6101b760048036038101906101b29190611aad565b6103f0565b6040516101c5929190611af3565b60405180910390f35b6101d661047c565b6040516101e39190611bef565b60405180910390f35b6101f46104a0565b6040516102019190611b75565b60405180910390f35b6102126104c4565b60405161021f9190611b75565b60405180910390f35b610242600480360381019061023d9190611aad565b6104ca565b005b61024c610850565b6040516102599190611c2b565b60405180910390f35b61026a610874565b6040516102779190611c61565b60405180910390f35b610288610881565b6040516102959190611bef565b60405180910390f35b6102a66108a5565b005b6102b061092d565b6040516102bd9190611c61565b60405180910390f35b6102e060048036038101906102db9190611c7c565b61093a565b005b6102ea6109e6565b6040516102f79190611cde565b60405180910390f35b610308610a0f565b6040516103159190611b75565b60405180910390f35b610326610a33565b6040516103339190611b75565b60405180910390f35b610344610a39565b6040516103519190611b75565b60405180910390f35b610362610a5d565b005b61036c610a67565b005b610376610f3a565b6040516103839190611d1a565b60405180910390f35b6103a660048036038101906103a19190611aad565b610f5e565b005b60046020528060005260406000206000915090508060000154908060010154905082565b600381815481106103dc57600080fd5b906000526020600020016000915090505481565b6000806000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061046982600001518360200151611056565b9050816000015181935093505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b600060015414156104de576104dd610a5d565b5b6002544210610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611dde565b60405180910390fd5b60008061052e336103f0565b9150915060008211610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611e70565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061060a3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110ad909392919063ffffffff16565b600061062d3373ffffffffffffffffffffffffffffffffffffffff166014611136565b61064e8573ffffffffffffffffffffffffffffffffffffffff166014611136565b61065785611372565b6040516020016106699392919061203a565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bfe07da67f000000000000000000000000000000000000000000000000000000000000000084846040518463ffffffff1660e01b81526004016106f7939291906120e1565b600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e9824d4f85857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016107c8949392919061211f565b600060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fa6b4727cfdb8e95976144bea15bbced00888403e14645e538f5a8c589486b7cf8484604051610842929190611af3565b60405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806001541415905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ad6114d3565b73ffffffffffffffffffffffffffffffffffffffff166108cb6109e6565b73ffffffffffffffffffffffffffffffffffffffff1614610921576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610918906121b0565b60405180910390fd5b61092b60006114db565b565b6000600254421015905090565b6109426114d3565b73ffffffffffffffffffffffffffffffffffffffff166109606109e6565b73ffffffffffffffffffffffffffffffffffffffff16146109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad906121b0565b60405180910390fd5b6109e181838573ffffffffffffffffffffffffffffffffffffffff1661159f9092919063ffffffff16565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a65611625565b565b610a6f610874565b610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa590612242565b60405180910390fd5b610ab661092d565b610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906122d4565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b509190611cde565b602060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190612309565b905060008111610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd906123a8565b60405180910390fd5b60006040518060400160405280601d81526020017f5265636f766572656420756e736f6c6420534152434f20746f6b656e7300000081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bfe07da67f000000000000000000000000000000000000000000000000000000000000000084846040518463ffffffff1660e01b8152600401610c8d939291906120e1565b600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610d3b929190612403565b6020604051808303816000875af1158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190612458565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610dfb929190612403565b6020604051808303816000875af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190612458565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610ebb929190612403565b6020604051808303816000875af1158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190612458565b507fbe842a2fe0dcb4d753f6d8de0884c9fe5e49f6c1e9d4c1b61d2a0c8fe165063182604051610f2e9190611b75565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610f666114d3565b73ffffffffffffffffffffffffffffffffffffffff16610f846109e6565b73ffffffffffffffffffffffffffffffffffffffff1614610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd1906121b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611041906124f7565b60405180910390fd5b611053816114db565b50565b600064e8d4a510006003838154811061107257611071612517565b5b9060005260206000200154670de0b6b3a7640000856110919190612575565b61109b91906125fe565b6110a591906125fe565b905092915050565b611130846323b872dd60e01b8585856040516024016110ce9392919061262f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117dd565b50505050565b6060600060028360026111499190612575565b6111539190612666565b67ffffffffffffffff81111561116c5761116b6126bc565b5b6040519080825280601f01601f19166020018201604052801561119e5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106111d6576111d5612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061123a57611239612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261127a9190612575565b6112849190612666565b90505b6001811115611324577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106112c6576112c5612517565b5b1a60f81b8282815181106112dd576112dc612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061131d906126eb565b9050611287565b5060008414611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90612761565b60405180910390fd5b8091505092915050565b606060008214156113ba576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506114ce565b600082905060005b600082146113ec5780806113d590612781565b915050600a826113e591906125fe565b91506113c2565b60008167ffffffffffffffff811115611408576114076126bc565b5b6040519080825280601f01601f19166020018201604052801561143a5781602001600182028036833780820191505090505b5090505b600085146114c75760018261145391906127ca565b9150600a8561146291906127fe565b603061146e9190612666565b60f81b81838151811061148457611483612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856114c091906125fe565b945061143e565b8093505050505b919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116208363a9059cbb60e01b84846040516024016115be92919061282f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117dd565b505050565b60006001541461166a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611661906128ca565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116e49190611cde565b602060405180830381865afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612309565b14611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90612982565b60405180910390fd5b426001819055507f0000000000000000000000000000000000000000000000000000000000000000426117989190612666565b6002819055507f20d65dc806f1ba6ab51537d616d92bf870e9c4db31557a7d07566363218025826001546002546040516117d3929190611af3565b60405180910390a1565b600061183f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118a49092919063ffffffff16565b905060008151111561189f578080602001905181019061185f9190612458565b61189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189590612a14565b60405180910390fd5b5b505050565b60606118b384846000856118bc565b90509392505050565b606082471015611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f890612aa6565b60405180910390fd5b61190a856119d0565b611949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194090612b12565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119729190612b79565b60006040518083038185875af1925050503d80600081146119af576040519150601f19603f3d011682016040523d82523d6000602084013e6119b4565b606091505b50915091506119c48282866119e3565b92505050949350505050565b600080823b905060008111915050919050565b606083156119f357829050611a43565b600083511115611a065782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a9190612b90565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a7a82611a4f565b9050919050565b611a8a81611a6f565b8114611a9557600080fd5b50565b600081359050611aa781611a81565b92915050565b600060208284031215611ac357611ac2611a4a565b5b6000611ad184828501611a98565b91505092915050565b6000819050919050565b611aed81611ada565b82525050565b6000604082019050611b086000830185611ae4565b611b156020830184611ae4565b9392505050565b611b2581611ada565b8114611b3057600080fd5b50565b600081359050611b4281611b1c565b92915050565b600060208284031215611b5e57611b5d611a4a565b5b6000611b6c84828501611b33565b91505092915050565b6000602082019050611b8a6000830184611ae4565b92915050565b6000819050919050565b6000611bb5611bb0611bab84611a4f565b611b90565b611a4f565b9050919050565b6000611bc782611b9a565b9050919050565b6000611bd982611bbc565b9050919050565b611be981611bce565b82525050565b6000602082019050611c046000830184611be0565b92915050565b6000611c1582611bbc565b9050919050565b611c2581611c0a565b82525050565b6000602082019050611c406000830184611c1c565b92915050565b60008115159050919050565b611c5b81611c46565b82525050565b6000602082019050611c766000830184611c52565b92915050565b600080600060608486031215611c9557611c94611a4a565b5b6000611ca386828701611a98565b9350506020611cb486828701611b33565b9250506040611cc586828701611a98565b9150509250925092565b611cd881611a6f565b82525050565b6000602082019050611cf36000830184611ccf565b92915050565b6000611d0482611bbc565b9050919050565b611d1481611cf9565b82525050565b6000602082019050611d2f6000830184611d0b565b92915050565b600082825260208201905092915050565b7f46756e64696e674578656375746f723a205075726368617365732063616e6e6f60008201527f74206265206d61646520616674657220746865206f666665722068617320657860208201527f7069726564000000000000000000000000000000000000000000000000000000604082015250565b6000611dc8604583611d35565b9150611dd382611d46565b606082019050919050565b60006020820190508181036000830152611df781611dbb565b9050919050565b7f46756e64696e674578656375746f723a2073656e64657220646f6573206e6f7460008201527f2068617665206120534152434f20616c6c6f636174696f6e0000000000000000602082015250565b6000611e5a603883611d35565b9150611e6582611dfe565b604082019050919050565b60006020820190508181036000830152611e8981611e4d565b9050919050565b600081905092915050565b7f46756e64696e67204578656375746564206279206163636f756e743a20000000600082015250565b6000611ed1601d83611e90565b9150611edc82611e9b565b601d82019050919050565b600081519050919050565b60005b83811015611f10578082015181840152602081019050611ef5565b83811115611f1f576000848401525b50505050565b6000611f3082611ee7565b611f3a8185611e90565b9350611f4a818560208601611ef2565b80840191505092915050565b7f20666f72206163636f756e743a20000000000000000000000000000000000000600082015250565b6000611f8c600e83611e90565b9150611f9782611f56565b600e82019050919050565b7f2e20546f74616c20534152434f733a2000000000000000000000000000000000600082015250565b6000611fd8601083611e90565b9150611fe382611fa2565b601082019050919050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612024600183611e90565b915061202f82611fee565b600182019050919050565b600061204582611ec4565b91506120518286611f25565b915061205c82611f7f565b91506120688285611f25565b915061207382611fcb565b915061207f8284611f25565b915061208a82612017565b9150819050949350505050565b6000601f19601f8301169050919050565b60006120b382611ee7565b6120bd8185611d35565b93506120cd818560208601611ef2565b6120d681612097565b840191505092915050565b60006060820190506120f66000830186611ccf565b6121036020830185611ae4565b818103604083015261211581846120a8565b9050949350505050565b60006080820190506121346000830187611ccf565b6121416020830186611ae4565b61214e6040830185611ae4565b61215b6060830184611ccf565b95945050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061219a602083611d35565b91506121a582612164565b602082019050919050565b600060208201905081810360008301526121c98161218d565b9050919050565b7f46756e64696e674578656375746f723a205075726368617365206f666665722060008201527f686173206e6f7420796574207374617274656400000000000000000000000000602082015250565b600061222c603383611d35565b9150612237826121d0565b604082019050919050565b6000602082019050818103600083015261225b8161221f565b9050919050565b7f46756e64696e674578656375746f723a205075726368617365206f666665722060008201527f686173206e6f7420796574206578706972656400000000000000000000000000602082015250565b60006122be603383611d35565b91506122c982612262565b604082019050919050565b600060208201905081810360008301526122ed816122b1565b9050919050565b60008151905061230381611b1c565b92915050565b60006020828403121561231f5761231e611a4a565b5b600061232d848285016122f4565b91505092915050565b7f46756e64696e674578656375746f723a20546865726520617265206e6f20536160008201527f72636f20746f6b656e7320746f207265636f7665720000000000000000000000602082015250565b6000612392603583611d35565b915061239d82612336565b604082019050919050565b600060208201905081810360008301526123c181612385565b9050919050565b6000819050919050565b60006123ed6123e86123e3846123c8565b611b90565b611ada565b9050919050565b6123fd816123d2565b82525050565b60006040820190506124186000830185611ccf565b61242560208301846123f4565b9392505050565b61243581611c46565b811461244057600080fd5b50565b6000815190506124528161242c565b92915050565b60006020828403121561246e5761246d611a4a565b5b600061247c84828501612443565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124e1602683611d35565b91506124ec82612485565b604082019050919050565b60006020820190508181036000830152612510816124d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061258082611ada565b915061258b83611ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125c4576125c3612546565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061260982611ada565b915061261483611ada565b925082612624576126236125cf565b5b828204905092915050565b60006060820190506126446000830186611ccf565b6126516020830185611ccf565b61265e6040830184611ae4565b949350505050565b600061267182611ada565b915061267c83611ada565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126b1576126b0612546565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006126f682611ada565b9150600082141561270a57612709612546565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061274b602083611d35565b915061275682612715565b602082019050919050565b6000602082019050818103600083015261277a8161273e565b9050919050565b600061278c82611ada565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127bf576127be612546565b5b600182019050919050565b60006127d582611ada565b91506127e083611ada565b9250828210156127f3576127f2612546565b5b828203905092915050565b600061280982611ada565b915061281483611ada565b925082612824576128236125cf565b5b828206905092915050565b60006040820190506128446000830185611ccf565b6128516020830184611ae4565b9392505050565b7f46756e64696e674578656375746f723a204f666665722068617320616c72656160008201527f6479207374617274656400000000000000000000000000000000000000000000602082015250565b60006128b4602a83611d35565b91506128bf82612858565b604082019050919050565b600060208201905081810360008301526128e3816128a7565b9050919050565b7f46756e64696e674578656375746f723a20496e73756666696369656e7420536160008201527f72636f20636f6e74726163742062616c616e636520746f207374617274206f6660208201527f6665720000000000000000000000000000000000000000000000000000000000604082015250565b600061296c604383611d35565b9150612977826128ea565b606082019050919050565b6000602082019050818103600083015261299b8161295f565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006129fe602a83611d35565b9150612a09826129a2565b604082019050919050565b60006020820190508181036000830152612a2d816129f1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612a90602683611d35565b9150612a9b82612a34565b604082019050919050565b60006020820190508181036000830152612abf81612a83565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612afc601d83611d35565b9150612b0782612ac6565b602082019050919050565b60006020820190508181036000830152612b2b81612aef565b9050919050565b600081519050919050565b600081905092915050565b6000612b5382612b32565b612b5d8185612b3d565b9350612b6d818560208601611ef2565b80840191505092915050565b6000612b858284612b48565b915081905092915050565b60006020820190508181036000830152612baa81846120a8565b90509291505056fea26469706673582212205b51937bda0b2085f5250a9820fc851f22c7a14247dac9451c036d4e2ee5212c64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b85780639ea5c1eb1161007c5780639ea5c1eb1461031e578063bd0d27041461033c578063be9a65551461035a578063c5543e5e14610364578063cfaac26a1461036e578063f2fde38b1461038c57610137565b8063715018a61461029e5780637c6edf07146102a8578063819bea4b146102c65780638da5cb5b146102e25780639a87b5ea1461030057610137565b80632565f94f116100ff5780632565f94f1461020a5780632dadda041461022857806332afcc89146102445780633717c67e14610262578063607e8f091461028057610137565b8063031b36771461013c5780630a65cb581461016d5780630e0229231461019d57806311eac855146101ce578063196a0648146101ec575b600080fd5b61015660048036038101906101519190611aad565b6103a8565b604051610164929190611af3565b60405180910390f35b61018760048036038101906101829190611b48565b6103cc565b6040516101949190611b75565b60405180910390f35b6101b760048036038101906101b29190611aad565b6103f0565b6040516101c5929190611af3565b60405180910390f35b6101d661047c565b6040516101e39190611bef565b60405180910390f35b6101f46104a0565b6040516102019190611b75565b60405180910390f35b6102126104c4565b60405161021f9190611b75565b60405180910390f35b610242600480360381019061023d9190611aad565b6104ca565b005b61024c610850565b6040516102599190611c2b565b60405180910390f35b61026a610874565b6040516102779190611c61565b60405180910390f35b610288610881565b6040516102959190611bef565b60405180910390f35b6102a66108a5565b005b6102b061092d565b6040516102bd9190611c61565b60405180910390f35b6102e060048036038101906102db9190611c7c565b61093a565b005b6102ea6109e6565b6040516102f79190611cde565b60405180910390f35b610308610a0f565b6040516103159190611b75565b60405180910390f35b610326610a33565b6040516103339190611b75565b60405180910390f35b610344610a39565b6040516103519190611b75565b60405180910390f35b610362610a5d565b005b61036c610a67565b005b610376610f3a565b6040516103839190611d1a565b60405180910390f35b6103a660048036038101906103a19190611aad565b610f5e565b005b60046020528060005260406000206000915090508060000154908060010154905082565b600381815481106103dc57600080fd5b906000526020600020016000915090505481565b6000806000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600061046982600001518360200151611056565b9050816000015181935093505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b600060015414156104de576104dd610a5d565b5b6002544210610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611dde565b60405180910390fd5b60008061052e336103f0565b9150915060008211610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90611e70565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061060a3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166110ad909392919063ffffffff16565b600061062d3373ffffffffffffffffffffffffffffffffffffffff166014611136565b61064e8573ffffffffffffffffffffffffffffffffffffffff166014611136565b61065785611372565b6040516020016106699392919061203a565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bfe07da67f000000000000000000000000000000000000000000000000000000000000000084846040518463ffffffff1660e01b81526004016106f7939291906120e1565b600060405180830381600087803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e9824d4f85857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016107c8949392919061211f565b600060405180830381600087803b1580156107e257600080fd5b505af11580156107f6573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167fa6b4727cfdb8e95976144bea15bbced00888403e14645e538f5a8c589486b7cf8484604051610842929190611af3565b60405180910390a250505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806001541415905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108ad6114d3565b73ffffffffffffffffffffffffffffffffffffffff166108cb6109e6565b73ffffffffffffffffffffffffffffffffffffffff1614610921576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610918906121b0565b60405180910390fd5b61092b60006114db565b565b6000600254421015905090565b6109426114d3565b73ffffffffffffffffffffffffffffffffffffffff166109606109e6565b73ffffffffffffffffffffffffffffffffffffffff16146109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad906121b0565b60405180910390fd5b6109e181838573ffffffffffffffffffffffffffffffffffffffff1661159f9092919063ffffffff16565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610a65611625565b565b610a6f610874565b610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa590612242565b60405180910390fd5b610ab661092d565b610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906122d4565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b509190611cde565b602060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190612309565b905060008111610bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcd906123a8565b60405180910390fd5b60006040518060400160405280601d81526020017f5265636f766572656420756e736f6c6420534152434f20746f6b656e7300000081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bfe07da67f000000000000000000000000000000000000000000000000000000000000000084846040518463ffffffff1660e01b8152600401610c8d939291906120e1565b600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610d3b929190612403565b6020604051808303816000875af1158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190612458565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610dfb929190612403565b6020604051808303816000875af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190612458565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f000000000000000000000000000000000000000000000000000000000000000060006040518363ffffffff1660e01b8152600401610ebb929190612403565b6020604051808303816000875af1158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190612458565b507fbe842a2fe0dcb4d753f6d8de0884c9fe5e49f6c1e9d4c1b61d2a0c8fe165063182604051610f2e9190611b75565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610f666114d3565b73ffffffffffffffffffffffffffffffffffffffff16610f846109e6565b73ffffffffffffffffffffffffffffffffffffffff1614610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd1906121b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561104a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611041906124f7565b60405180910390fd5b611053816114db565b50565b600064e8d4a510006003838154811061107257611071612517565b5b9060005260206000200154670de0b6b3a7640000856110919190612575565b61109b91906125fe565b6110a591906125fe565b905092915050565b611130846323b872dd60e01b8585856040516024016110ce9392919061262f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117dd565b50505050565b6060600060028360026111499190612575565b6111539190612666565b67ffffffffffffffff81111561116c5761116b6126bc565b5b6040519080825280601f01601f19166020018201604052801561119e5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106111d6576111d5612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061123a57611239612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261127a9190612575565b6112849190612666565b90505b6001811115611324577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106112c6576112c5612517565b5b1a60f81b8282815181106112dd576112dc612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061131d906126eb565b9050611287565b5060008414611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90612761565b60405180910390fd5b8091505092915050565b606060008214156113ba576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506114ce565b600082905060005b600082146113ec5780806113d590612781565b915050600a826113e591906125fe565b91506113c2565b60008167ffffffffffffffff811115611408576114076126bc565b5b6040519080825280601f01601f19166020018201604052801561143a5781602001600182028036833780820191505090505b5090505b600085146114c75760018261145391906127ca565b9150600a8561146291906127fe565b603061146e9190612666565b60f81b81838151811061148457611483612517565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856114c091906125fe565b945061143e565b8093505050505b919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116208363a9059cbb60e01b84846040516024016115be92919061282f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506117dd565b505050565b60006001541461166a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611661906128ca565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116e49190611cde565b602060405180830381865afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612309565b14611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90612982565b60405180910390fd5b426001819055507f0000000000000000000000000000000000000000000000000000000000000000426117989190612666565b6002819055507f20d65dc806f1ba6ab51537d616d92bf870e9c4db31557a7d07566363218025826001546002546040516117d3929190611af3565b60405180910390a1565b600061183f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118a49092919063ffffffff16565b905060008151111561189f578080602001905181019061185f9190612458565b61189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189590612a14565b60405180910390fd5b5b505050565b60606118b384846000856118bc565b90509392505050565b606082471015611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f890612aa6565b60405180910390fd5b61190a856119d0565b611949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194090612b12565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119729190612b79565b60006040518083038185875af1925050503d80600081146119af576040519150601f19603f3d011682016040523d82523d6000602084013e6119b4565b606091505b50915091506119c48282866119e3565b92505050949350505050565b600080823b905060008111915050919050565b606083156119f357829050611a43565b600083511115611a065782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3a9190612b90565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a7a82611a4f565b9050919050565b611a8a81611a6f565b8114611a9557600080fd5b50565b600081359050611aa781611a81565b92915050565b600060208284031215611ac357611ac2611a4a565b5b6000611ad184828501611a98565b91505092915050565b6000819050919050565b611aed81611ada565b82525050565b6000604082019050611b086000830185611ae4565b611b156020830184611ae4565b9392505050565b611b2581611ada565b8114611b3057600080fd5b50565b600081359050611b4281611b1c565b92915050565b600060208284031215611b5e57611b5d611a4a565b5b6000611b6c84828501611b33565b91505092915050565b6000602082019050611b8a6000830184611ae4565b92915050565b6000819050919050565b6000611bb5611bb0611bab84611a4f565b611b90565b611a4f565b9050919050565b6000611bc782611b9a565b9050919050565b6000611bd982611bbc565b9050919050565b611be981611bce565b82525050565b6000602082019050611c046000830184611be0565b92915050565b6000611c1582611bbc565b9050919050565b611c2581611c0a565b82525050565b6000602082019050611c406000830184611c1c565b92915050565b60008115159050919050565b611c5b81611c46565b82525050565b6000602082019050611c766000830184611c52565b92915050565b600080600060608486031215611c9557611c94611a4a565b5b6000611ca386828701611a98565b9350506020611cb486828701611b33565b9250506040611cc586828701611a98565b9150509250925092565b611cd881611a6f565b82525050565b6000602082019050611cf36000830184611ccf565b92915050565b6000611d0482611bbc565b9050919050565b611d1481611cf9565b82525050565b6000602082019050611d2f6000830184611d0b565b92915050565b600082825260208201905092915050565b7f46756e64696e674578656375746f723a205075726368617365732063616e6e6f60008201527f74206265206d61646520616674657220746865206f666665722068617320657860208201527f7069726564000000000000000000000000000000000000000000000000000000604082015250565b6000611dc8604583611d35565b9150611dd382611d46565b606082019050919050565b60006020820190508181036000830152611df781611dbb565b9050919050565b7f46756e64696e674578656375746f723a2073656e64657220646f6573206e6f7460008201527f2068617665206120534152434f20616c6c6f636174696f6e0000000000000000602082015250565b6000611e5a603883611d35565b9150611e6582611dfe565b604082019050919050565b60006020820190508181036000830152611e8981611e4d565b9050919050565b600081905092915050565b7f46756e64696e67204578656375746564206279206163636f756e743a20000000600082015250565b6000611ed1601d83611e90565b9150611edc82611e9b565b601d82019050919050565b600081519050919050565b60005b83811015611f10578082015181840152602081019050611ef5565b83811115611f1f576000848401525b50505050565b6000611f3082611ee7565b611f3a8185611e90565b9350611f4a818560208601611ef2565b80840191505092915050565b7f20666f72206163636f756e743a20000000000000000000000000000000000000600082015250565b6000611f8c600e83611e90565b9150611f9782611f56565b600e82019050919050565b7f2e20546f74616c20534152434f733a2000000000000000000000000000000000600082015250565b6000611fd8601083611e90565b9150611fe382611fa2565b601082019050919050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612024600183611e90565b915061202f82611fee565b600182019050919050565b600061204582611ec4565b91506120518286611f25565b915061205c82611f7f565b91506120688285611f25565b915061207382611fcb565b915061207f8284611f25565b915061208a82612017565b9150819050949350505050565b6000601f19601f8301169050919050565b60006120b382611ee7565b6120bd8185611d35565b93506120cd818560208601611ef2565b6120d681612097565b840191505092915050565b60006060820190506120f66000830186611ccf565b6121036020830185611ae4565b818103604083015261211581846120a8565b9050949350505050565b60006080820190506121346000830187611ccf565b6121416020830186611ae4565b61214e6040830185611ae4565b61215b6060830184611ccf565b95945050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061219a602083611d35565b91506121a582612164565b602082019050919050565b600060208201905081810360008301526121c98161218d565b9050919050565b7f46756e64696e674578656375746f723a205075726368617365206f666665722060008201527f686173206e6f7420796574207374617274656400000000000000000000000000602082015250565b600061222c603383611d35565b9150612237826121d0565b604082019050919050565b6000602082019050818103600083015261225b8161221f565b9050919050565b7f46756e64696e674578656375746f723a205075726368617365206f666665722060008201527f686173206e6f7420796574206578706972656400000000000000000000000000602082015250565b60006122be603383611d35565b91506122c982612262565b604082019050919050565b600060208201905081810360008301526122ed816122b1565b9050919050565b60008151905061230381611b1c565b92915050565b60006020828403121561231f5761231e611a4a565b5b600061232d848285016122f4565b91505092915050565b7f46756e64696e674578656375746f723a20546865726520617265206e6f20536160008201527f72636f20746f6b656e7320746f207265636f7665720000000000000000000000602082015250565b6000612392603583611d35565b915061239d82612336565b604082019050919050565b600060208201905081810360008301526123c181612385565b9050919050565b6000819050919050565b60006123ed6123e86123e3846123c8565b611b90565b611ada565b9050919050565b6123fd816123d2565b82525050565b60006040820190506124186000830185611ccf565b61242560208301846123f4565b9392505050565b61243581611c46565b811461244057600080fd5b50565b6000815190506124528161242c565b92915050565b60006020828403121561246e5761246d611a4a565b5b600061247c84828501612443565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006124e1602683611d35565b91506124ec82612485565b604082019050919050565b60006020820190508181036000830152612510816124d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061258082611ada565b915061258b83611ada565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125c4576125c3612546565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061260982611ada565b915061261483611ada565b925082612624576126236125cf565b5b828204905092915050565b60006060820190506126446000830186611ccf565b6126516020830185611ccf565b61265e6040830184611ae4565b949350505050565b600061267182611ada565b915061267c83611ada565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126b1576126b0612546565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006126f682611ada565b9150600082141561270a57612709612546565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061274b602083611d35565b915061275682612715565b602082019050919050565b6000602082019050818103600083015261277a8161273e565b9050919050565b600061278c82611ada565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127bf576127be612546565b5b600182019050919050565b60006127d582611ada565b91506127e083611ada565b9250828210156127f3576127f2612546565b5b828203905092915050565b600061280982611ada565b915061281483611ada565b925082612824576128236125cf565b5b828206905092915050565b60006040820190506128446000830185611ccf565b6128516020830184611ae4565b9392505050565b7f46756e64696e674578656375746f723a204f666665722068617320616c72656160008201527f6479207374617274656400000000000000000000000000000000000000000000602082015250565b60006128b4602a83611d35565b91506128bf82612858565b604082019050919050565b600060208201905081810360008301526128e3816128a7565b9050919050565b7f46756e64696e674578656375746f723a20496e73756666696369656e7420536160008201527f72636f20636f6e74726163742062616c616e636520746f207374617274206f6660208201527f6665720000000000000000000000000000000000000000000000000000000000604082015250565b600061296c604383611d35565b9150612977826128ea565b606082019050919050565b6000602082019050818103600083015261299b8161295f565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006129fe602a83611d35565b9150612a09826129a2565b604082019050919050565b60006020820190508181036000830152612a2d816129f1565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612a90602683611d35565b9150612a9b82612a34565b604082019050919050565b60006020820190508181036000830152612abf81612a83565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612afc601d83611d35565b9150612b0782612ac6565b602082019050919050565b60006020820190508181036000830152612b2b81612aef565b9050919050565b600081519050919050565b600081905092915050565b6000612b5382612b32565b612b5d8185612b3d565b9350612b6d818560208601611ef2565b80840191505092915050565b6000612b858284612b48565b915081905092915050565b60006020820190508181036000830152612baa81846120a8565b90509291505056fea26469706673582212205b51937bda0b2085f5250a9820fc851f22c7a14247dac9451c036d4e2ee5212c64736f6c634300080b0033",
  "devdoc": {
    "details": "allow a whitelisted set of addresses to Fund SARCO, via stablecoins (USDC),exchange rate set w/ each traunche/group",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "inits/sets sarco funding enviorment",
        "params": {
          "_generalTokenVesting": "GeneralTokenVesting contract address",
          "_offerExpirationDelay": "Delay from the contract deployment to offer expiration, in seconds",
          "_sarcoAllocations": "List of SARCO token allocations, should include decimals 10 ** 18",
          "_sarcoAllocationsTotal": "Checksum of SARCO token allocations, should include decimals 10 ** 18",
          "_sarcoDao": "Sarco DAO contract address",
          "_sarcoFunders": "List of valid SARCO investor",
          "_sarcoRateIndex": "group which Sarco investor belongs to",
          "_sarcoToken": "Sarco token address",
          "_usdcToSarcoRates": "Array of usdc/sarco rates",
          "_usdcToken": "USDC token address",
          "_vestingEndDelay": "Delay from the purchase moment to the vesting end moment, in seconds"
        }
      },
      "executePurchase(address)": {
        "details": "Purchases Sarco for the specified address in exchange for USDC.",
        "params": {
          "sarcoReceiver": "Whitelisted Sarco Investor"
        }
      },
      "getAllocation(address)": {
        "details": "Returns the Sarco allocation and the USDC cost to invest the Sarco Allocation of the whitelisted Sarco investor",
        "params": {
          "sarcoReceiver": "Whitelisted Sarco Investor"
        },
        "returns": {
          "_0": "A tuple: the first element is the amount of SARCO available for purchase (zero if the purchase was already executed for that address), the second element is the USDC cost of the purchase."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverErc20(address,uint256,address)": {
        "details": "Remember that only owner can call so be careful when use on contracts generated from other contracts.",
        "params": {
          "recipientAddress": "The address to send tokens to",
          "tokenAddress": "The token contract address",
          "tokenAmount": "Number of tokens to be sent"
        }
      },
      "recoverUnsoldTokens()": {
        "details": "If recoverUnsoldTokens > 0 after the offer expired, sarco tokens are send back to Sarco Dao via Finance Contract."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "FundingExecutor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executePurchase(address)": {
        "notice": "Sends USDC tokens used to purchase Sarco to Sarco DAO,  Approves GeneralTokenVesting contract Sarco Tokens to utilizes allocated Sarco funds, Starts token vesting via GeneralTokenVesting contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FundingExecutor.sol:FundingExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 974,
        "contract": "contracts/FundingExecutor.sol:FundingExecutor",
        "label": "offerStartedAt",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 976,
        "contract": "contracts/FundingExecutor.sol:FundingExecutor",
        "label": "offerExpiresAt",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 979,
        "contract": "contracts/FundingExecutor.sol:FundingExecutor",
        "label": "usdcToSarcoRates",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 989,
        "contract": "contracts/FundingExecutor.sol:FundingExecutor",
        "label": "funders",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(FunderInfo)984_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(FunderInfo)984_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FundingExecutor.FunderInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FunderInfo)984_storage"
      },
      "t_struct(FunderInfo)984_storage": {
        "encoding": "inplace",
        "label": "struct FundingExecutor.FunderInfo",
        "members": [
          {
            "astId": 981,
            "contract": "contracts/FundingExecutor.sol:FundingExecutor",
            "label": "sarcoAllocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 983,
            "contract": "contracts/FundingExecutor.sol:FundingExecutor",
            "label": "usdcToSarcoRateIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}